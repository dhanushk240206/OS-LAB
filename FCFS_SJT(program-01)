#include <stdio.h>

#define MAX 10

typedef struct {
    int id;            
    int arrival_time;  
    int burst_time;    
    int waiting_time;  
    int turnaround_time; 
} Process;

void FCFS(Process processes[], int n);
void SJF(Process processes[], int n);
void calculateTimes(Process processes[], int n);

int main() {
    int n, i;

 
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process processes[MAX];


    for(i = 0; i < n; i++) {
        printf("Enter Arrival Time and Burst Time for Process %d: ", i + 1);
        processes[i].id = i + 1;
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }

    
    printf("\nFCFS Scheduling\n");
    FCFS(processes, n);

    printf("\nSJF Scheduling\n");
    SJF(processes, n);

    return 0;
}


void FCFS(Process processes[], int n) {
    int i;
    int current_time = 0;

    for(i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].waiting_time = current_time - processes[i].arrival_time;
        current_time += processes[i].burst_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    calculateTimes(processes, n);
}

void SJF(Process processes[], int n) {
    int i, j;
    Process temp;

 
    for(i = 0; i < n - 1; i++) {
        for(j = i + 1; j < n; j++) {
            if(processes[i].burst_time > processes[j].burst_time) {
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    int current_time = 0;
    for(i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].waiting_time = current_time - processes[i].arrival_time;
        current_time += processes[i].burst_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    calculateTimes(processes, n);
}

void calculateTimes(Process processes[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    printf("\nProcessID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;

        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}
